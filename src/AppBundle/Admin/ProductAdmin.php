<?php
/**
 * Created by PhpStorm.
 * User: sovkutsan
 * Date: 2/9/18
 * Time: 4:17 PM
 */

namespace AppBundle\Admin;


use AppBundle\Entity\BlogPost;
use AppBundle\Entity\Product;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Form\Type\ModelType;

class ProductAdmin extends AbstractAdmin
{
    protected function configureFormFields(FormMapper $formMapper)
    {
        // get the current Image instance
        $object = $this->getSubject();

        // use $fileFieldOptions so we can add other options to the field
        $fileFieldOptions = ['required' => false];
        if ($object && ($webPath = $object->getPicPath())) {
            // get the container so the full path to the image can be set
            $container = $this->getConfigurationPool()->getContainer();
            $fullPath = $container->get('request_stack')->getCurrentRequest()->getBasePath().'/'.$webPath;

            // add a 'help' option containing the preview's img tag
            $fileFieldOptions['help'] = '<img src="'.$fullPath.'" class="admin-preview" />';
        }


        $formMapper
            ->add('name', 'text')
            ->add('price', 'number')
            ->add('description', 'textarea')
            ->add('file', 'file', $fileFieldOptions);
        /*->add('category', 'sonata_type_model', [
                'class' => 'AppBundle\Entity\Category',
                //'choice_label' => 'name'
                'property' => 'name'
            ])*/
    }

    public function prePersist($object)
    {
        $this->manageFileUpload($object);
        //parent::prePersist($object); // TODO: Change the autogenerated stub
    }
    public function preUpdate($object)
    {
        $this->manageFileUpload($object);
        //parent::preUpdate($object); // TODO: Change the autogenerated stub
    }
    private function manageFileUpload($image) {
        if($image->getFile()) {
            $image->refreshUpdated();
        }
    }


    protected function configureDatagridFilters(DatagridMapper $datagridMapper)
    {
        $datagridMapper
            ->add('name')
            /*->add('category', null, [], 'entity', [
                    'class' => 'AppBundle\Entity\Category',
                    'choice_label' => 'name'
                ]
            )*/
        ;
    }

    protected function configureListFields(ListMapper $listMapper)
    {
        $listMapper
            ->addIdentifier('name')
            //->add('pic')
            ;
    }

    public function toString($object)
    {
        return $object instanceof Product ?
            $object->getName() : 'Product';
    }
}